#+title: Git Style Guide

* Conventional Commits for Loom
** Introduction
   This document outlines our commitment to the Conventional Commits specification to ensure clear and consistent commit messages across our projects.

** Conventional Commits Specification
   For detailed information, see the full specification [[https://www.conventionalcommits.org/en/v1.0.0/#specification][here]].

** What are Conventional Commits?
   Conventional Commits are a standard format for writing commit messages, making it easier to understand the history of the project, automate the release process, and integrate with semantic versioning.

** Commit Message Format
   Each commit message should follow this format: <type>[optional scope]: <description>

** Types of Commits
   - feat: A new feature
   - fix: A bug fix
   - docs: Documentation only changes
   - style: Changes that do not affect the meaning of the code
   - refactor: A code change that neither fixes a bug nor adds a feature
   - test: Adding missing tests or correcting existing ones
   - support: Changes to the build process or auxiliary tools and libraries

** Examples of Good Commit Messages
   - feat(auth): implement OAuth2 authentication
     [longer commit message if necessary]
     [Reviewed by]

   - fix(server): resolve memory leak in data processing
     [longer commit message if necessary]
     [Reviewed by]

   - docs(readme): update installation instructions
     [longer commit message if necessary]
     [Reviewed by]

** Enforcement
   We enforce conventional commit standards through Git hooks and continuous integration checks.

** FAQs
*** How should I deal with commit messages in the initial development phase?

    We recommend that you proceed as if you’ve already released the product. Typically somebody, even if it’s your fellow software developers, is using your software. They’ll want to know what’s fixed, what breaks etc.

*** Are the types in the commit title uppercase or lowercase?

     Any casing may be used, but it’s best to be consistent.

*** What do I do if the commit conforms to more than one of the commit types?

     Go back and make multiple commits whenever possible. Part of the benefit of Conventional Commits is its ability to drive us to make more organized commits and PRs.

*** Doesn’t this discourage rapid development and fast iteration?

     It discourages moving fast in a disorganized way. It helps you be able to move fast long term across multiple projects with varied contributors.

*** Might Conventional Commits lead developers to limit the type of commits they make because they’ll be thinking in the types provided?

    Conventional Commits encourages us to make more of certain types of commits such as fixes. Other than that, the flexibility of Conventional Commits allows your team to come up with their own types and change those types over time.

*** How does this relate to SemVer?

     =fix= type commits should be translated to =PATCH= releases. =feat= type commits should be translated to =MINOR= releases. Commits with =BREAKING CHANGE= in the commits, regardless of type, should be translated to =MAJOR= releases.

*** How should I version my extensions to the Conventional Commits Specification, e.g. @jameswomack/conventional-commit-spec?

    We recommend using SemVer to release your own extensions to this specification (and encourage you to make these extensions!)

*** What do I do if I accidentally use the wrong commit type?

**** When you used a type that’s of the spec but not the correct type, e.g. fix instead of feat

    Prior to merging or releasing the mistake, we recommend using =git rebase -i= to edit the commit history. After release, the cleanup will be different according to what tools and processes you use.

**** When you used a type not of the spec, e.g. feet instead of feat

    In a worst case scenario, it’s not the end of the world if a commit lands that does not meet the Conventional Commits specification. It simply means that commit will be missed by tools that are based on the spec.

*** Do all my contributors need to use the Conventional Commits specification?

    No! If you use a squash based workflow on Git lead maintainers can clean up the commit messages as they’re merged—adding no workload to casual committers. A common workflow for this is to have your git system automatically squash commits from a pull request and present a form for the lead maintainer to enter the proper git commit message for the merge.

*** How does Conventional Commits handle revert commits?

Reverting code can be complicated: are you reverting multiple commits? if you revert a feature, should the next release instead be a patch?
Conventional Commits does not make an explicit effort to define revert behavior. Instead we leave it to tooling authors to use the flexibility of types and footers to develop their logic for handling reverts.
One recommendation is to use the =revert= type, and a footer that references the commit SHAs that are being reverted:

    #+begin_src git
    revert: let us never again speak of the noodle incident

    Refs: 676104e, a215868
    #+end_src

** Contribution Guidelines
   Refer to our [Contribution Guidlines[]] for more information on contributing to our projects.

** Contact
   For questions about this policy, please contact [Contact Information].
